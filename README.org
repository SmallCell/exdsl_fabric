#+STARTUP: showall hidestars

#+OPTIONS: author:nil creator:nil
#+OPTIONS: toc:nil

#+TAGS: DOCS(d) CODING(c) TESTING(t) PLANING(p)

#+TITLE: CWMP Protocol overview page


* Qwerview
  Some (60/40) people capable to programm their stuff and not patient
  enough to learn programming. Every people is domain expert one way
  or another but only those in 'Some can delegate thair routine to
  machine and become meta expert.

  This programm is attemt to bring meta tools to the Domain Expert.

  Design goals:
  - is useful to developers while fixing bugs
  - is portable among a variety of host computers
  - permits testing interactive programs (ANSI console only)
  - provides "glue" to link existing utilities together
  - automate the generation of an user script
  - can be used against remote target `expect style

* Use case: Creating new project
** Bootstrap application
   (Assuming Erlang/Elixir installed on target system.)

   Chose project name like - `pet_automation.
   
*** Create empty project
     : mix new pet_automation
     
*** Add dependenties to `fabric engine
#+BEGIN_SRC elixir
  defp deps do
      [{ :exdsl_fabric, "0.1", git: "https://github.com/SmallCell/exdsl_fabric.git" }]
  end
#+END_SRC

   : mix deps.get

*** Add minilanguages you intend to use
#+BEGIN_SRC elixir
  defp deps do
      [
       # Fabric to manage other minilanguages
       { :exdsl_fabric, "0.1", git: "https://github.com/SmallCell/exdsl_fabric.git" },
  
       # Minilanguages
       { :exdsl_shell, "0.1", git: "https://github.com/SmallCell/exdsl_shell.git" },
       { :exdsl_nets, "0.1", git: "https://github.com/SmallCell/exdsl_nets.git" },
       { :exdsl_fsm, "0.1", git: "https://github.com/SmallCell/exdsl_fsm.git" },
      ]
  end
#+END_SRC


** Create new script   
   Add new script `install_db using `shell mini language
   : mix dsl.new install_db shell
   
   
   https://github.com/taybin/mix_protobuffs/blob/master/lib/mix_protobuffs.ex

* Background

** Minilanguages
   
   Borrowers
   | Name   | Desc                   | Model                                |
   |--------+------------------------+--------------------------------------|
   | expect | expect TCL extention   | perl-exp                             |
   | shell  | based on python Fabric | py-fabric # can have deps on expect? |
   | fsm    | Erlang gen_fsm wrapper |                                      |
   | logger | Erlang lager wrapper   |                                      |


   
** Metalanguages

   | Meta      | Desc                                              | Model                |
   |-----------+---------------------------------------------------+----------------------|
   | monadic   | Fork from https://github.com/sasa1977/monadic.git | Monadic computaion   |
   | make      | dependency network                                | Makefile             |
   | guard     | handle events on file system modifications.       | http://guardgem.org/ |
   | sequencer | incapsulate monadic error, add paralel execution  | ?                    |
   | pmap      | paralel mapper for command                        | onspot map-reduce    |
   |           |                                                   |                      |
   
*** Nets ( network dependencies )
    
    [[file:docs/nets_on_board.jpeg]]
    
    

*** Guard
    : mix guard.init
    : mix guard.add live-reload

    In replacement for light CI
    : watchfs 'mix test' **/*.(ex|exs)

#+BEGIN_SRC shell
#!/bin/sh

# echo $EXT

CMD=$1
echo $CMD

shift
FILES=$@
echo $FILES

# exit

while true
do
    inotifywait -r -q --exclude ".*_flymake.*" --exclude "\.#.*"  $FILES
    if [ $? -eq 0 ]; then
	eval "$CMD"
	RES=$?
	TIME=`date +%T`
	if [ $RES -eq 0 ]; then
	    echo "\033[1;32m ($TIME)  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\033[m"
	else
	    echo "\033[1;31m ($TIME)  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\033[m"
	fi
    else
	exit
    fi
done

#+END_SRC


* References

  1. Douglas Crockford: Monads and Gonads http://www.youtube.com/watch?v=dkZFtimgAcM
  2. functional combinators http://www.ittc-ku.net/Projects/SLDG/filing_cabinet/Hughes_Generalizing_Monads_to_Arrows.pdf
  3. Higher Order Messaging http://www.metaobject.com/papers/HOM-Presentation.pdf
     : do,collect,select,selectWhere:,reduce
  4. Joe Armstrong



  Compile snippet:
#+BEGIN_SRC elixir
  q = quote do
        defprotocol MyInspect do
          def inspect(thing, opts)
        end
    end

    IO.puts Macro.to_binary(Macro.expand q, __ENV__)
#+END_SRC

 
